[{"/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/index.js":"1","/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/App.js":"2","/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/reportWebVitals.js":"3","/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/components/Popular.js":"4","/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/utils/api.js":"5","/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/components/Battle.js":"6"},{"size":500,"mtime":1610267603807,"results":"7","hashOfConfig":"8"},{"size":358,"mtime":1610338924050,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1610265422240,"results":"10","hashOfConfig":"8"},{"size":4020,"mtime":1610321222075,"results":"11","hashOfConfig":"8"},{"size":428,"mtime":1610318201808,"results":"12","hashOfConfig":"8"},{"size":4617,"mtime":1610353417396,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"up6u8n",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/index.js",[],["29","30"],"/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/App.js",["31","32"],"/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/reportWebVitals.js",[],"/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/components/Popular.js",["33","34"],"import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { fetchPopularRepos } from \"../utils/api\";\nimport {\n  FaUser,\n  FaStar,\n  FaCodeBranch,\n  FaExclamationTriangle,\n} from \"react-icons/fa\";\n\nfunction LanguagesNav({ selected, onUpdateLanguage }) {\n  const languages = [\"All\", \"Javascript\", \"Ruby\", \"Java\", \"CSS\", \"Python\"];\n  return (\n    <ul className=\"flex-center\">\n      {languages.map((language) => (\n        <li key={language}>\n          <button\n            className=\"btn-clear nav-link\"\n            style={language === selected ? { color: \"rgb(187, 46, 31)\" } : null}\n            onClick={() => onUpdateLanguage(language)}\n          >\n            {language}\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nLanguagesNav.propTypes = {\n  selected: PropTypes.string.isRequired,\n  onUpdateLanguage: PropTypes.func.isRequired,\n};\n\nfunction ReposGrid({ repos }) {\n  return (\n    <ul className=\"grid space-around\">\n      {repos.map((repo, index) => {\n        const {\n          name,\n          owner,\n          html_url,\n          stargazers_count,\n          forks,\n          open_issues,\n        } = repo;\n        const { login, avatar_url } = owner;\n\n        return (\n          <li key={html_url} className=\"repo bg-light\">\n            <h4 className=\"header-lg center-text\">#{index + 1}</h4>\n            <img\n              className=\"avatar\"\n              src={avatar_url}\n              alt={`Avatar for ${login}`}\n            />\n            <h2 className=\"center-text\">\n              <a className=\"link\" href={html_url}>\n                {login}\n              </a>\n            </h2>\n            <ul>\n              <li>\n                <FaUser color=\"rgb(255, 191, 116)\" size={22} />\n                <a href={`https://github.com/${login}`}>{login}</a>\n              </li>\n              <li>\n                <FaStar color=\"rgb(255, 215, 0)\" size={22} />\n                {stargazers_count.toLocaleString()} stars\n              </li>\n              <li>\n                <FaCodeBranch color=\"rgb(129, 195, 245)\" size={22} />\n                {forks.toLocaleString()} forks\n              </li>\n              <li>\n                <FaExclamationTriangle color=\"rgb(241, 138, 147)\" size={22} />\n                {open_issues.toLocaleString()} open\n              </li>\n            </ul>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nReposGrid.propTypes = {\n  repos: PropTypes.array.isRequired,\n};\n\nexport default class Popular extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedLanguage: \"ALL\",\n      repos: {},\n      error: null,\n    };\n\n    this.updateLanguage = this.updateLanguage.bind(this);\n    this.isLoading = this.isLoading.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateLanguage(this.state.selectedLanguage);\n  }\n\n  updateLanguage(selectedLanguage) {\n    this.setState({\n      selectedLanguage,\n      error: null,\n    });\n\n    if (!this.state.repos[selectedLanguage]) {\n      fetchPopularRepos(selectedLanguage)\n        .then((data) => {\n          this.setState(({ repos }) => ({\n            repos: {\n              ...repos,\n              [selectedLanguage]: data,\n            },\n          }));\n        })\n        .catch((error) => {\n          console.warn(\"Error fetching repos: \", error);\n          this.setState({\n            error: \"There was an error fetching the repositories.\",\n          });\n        });\n    }\n  }\n\n  isLoading() {\n    const { selectedLanguage, repos, error } = this.state;\n\n    return !repos[selectedLanguage] && error == null;\n  }\n\n  render() {\n    const { selectedLanguage, repos, error } = this.state;\n    return (\n      <React.Fragment>\n        <LanguagesNav\n          selected={selectedLanguage}\n          onUpdateLanguage={this.updateLanguage}\n        />\n        {this.isLoading() && <p>isLoading</p>}\n\n        {error && <p>{error}</p>}\n\n        {repos[selectedLanguage] && (\n          <ReposGrid repos={repos[selectedLanguage]} />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n","/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/utils/api.js",["35"],"import { func } from \"prop-types\";\n\nexport function fetchPopularRepos(language) {\n  const endpoint = window.encodeURI(\n    `https://api.github.com/search/repositories?q=stars:>1+language:${language}&sort=stars&order=desc&type=Repositories`\n  );\n\n  return fetch(endpoint)\n    .then((res) => res.json())\n    .then((data) => {\n      if (!data.items) {\n        throw Error(data.message);\n      }\n\n      return data.items;\n    });\n}\n","/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/components/Battle.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":2,"column":8,"nodeType":"42","messageId":"43","endLine":2,"endColumn":16},{"ruleId":"40","severity":1,"message":"44","line":3,"column":8,"nodeType":"42","messageId":"43","endLine":3,"endColumn":15},{"ruleId":"40","severity":1,"message":"45","line":1,"column":17,"nodeType":"42","messageId":"43","endLine":1,"endColumn":25},{"ruleId":"40","severity":1,"message":"46","line":40,"column":11,"nodeType":"42","messageId":"43","endLine":40,"endColumn":15},{"ruleId":"40","severity":1,"message":"47","line":1,"column":10,"nodeType":"42","messageId":"43","endLine":1,"endColumn":14},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'Popular' is defined but never used.","'Fragment' is defined but never used.","'name' is assigned a value but never used.","'func' is defined but never used.","no-global-assign","no-unsafe-negation"]