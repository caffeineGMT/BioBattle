[{"/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/index.js":"1","/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/App.js":"2","/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/reportWebVitals.js":"3","/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/components/Popular.js":"4","/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/utils/api.js":"5","/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/components/Battle.js":"6","/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/components/Card.js":"7","/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/components/Loading.js":"8","/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/components/Tooltip.js":"9","/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/components/Hover.js":"10","/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/contexts/theme.js":"11","/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/components/Nav.js":"12","/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/components/Results.js":"13"},{"size":500,"mtime":1610267603807,"results":"14","hashOfConfig":"15"},{"size":1458,"mtime":1610751075801,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1610265422240,"results":"17","hashOfConfig":"15"},{"size":4099,"mtime":1610688360260,"results":"18","hashOfConfig":"15"},{"size":2006,"mtime":1610521745197,"results":"19","hashOfConfig":"15"},{"size":5739,"mtime":1610751044669,"results":"20","hashOfConfig":"15"},{"size":943,"mtime":1610697014504,"results":"21","hashOfConfig":"15"},{"size":996,"mtime":1610686169631,"results":"22","hashOfConfig":"15"},{"size":874,"mtime":1610694421616,"results":"23","hashOfConfig":"15"},{"size":590,"mtime":1610694168146,"results":"24","hashOfConfig":"15"},{"size":166,"mtime":1610694804214,"results":"25","hashOfConfig":"15"},{"size":1169,"mtime":1610698186527,"results":"26","hashOfConfig":"15"},{"size":3382,"mtime":1610750996689,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"up6u8n",{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},"/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/index.js",[],["59","60"],"/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/App.js",["61"],"/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/reportWebVitals.js",[],"/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/components/Popular.js",["62","63"],"import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { fetchPopularRepos } from \"../utils/api\";\nimport {\n  FaUser,\n  FaStar,\n  FaCodeBranch,\n  FaExclamationTriangle,\n} from \"react-icons/fa\";\nimport Card from \"./Card\";\nimport Loading from \"./Loading\";\nimport Tooltip from \"./Tooltip\";\n\nfunction LanguagesNav({ selected, onUpdateLanguage }) {\n  const languages = [\"All\", \"Javascript\", \"Ruby\", \"Java\", \"CSS\", \"Python\"];\n  return (\n    <ul className=\"flex-center\">\n      {languages.map((language) => (\n        <li key={language}>\n          <button\n            className=\"btn-clear nav-link\"\n            style={language === selected ? { color: \"rgb(187, 46, 31)\" } : null}\n            onClick={() => onUpdateLanguage(language)}\n          >\n            {language}\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nLanguagesNav.propTypes = {\n  selected: PropTypes.string.isRequired,\n  onUpdateLanguage: PropTypes.func.isRequired,\n};\n\nfunction ReposGrid({ repos }) {\n  return (\n    <ul className=\"grid space-around\">\n      {repos.map((repo, index) => {\n        const {\n          name,\n          owner,\n          html_url,\n          stargazers_count,\n          forks,\n          open_issues,\n        } = repo;\n        const { login, avatar_url } = owner;\n\n        return (\n          <li key={html_url}>\n            <Card\n              header={`#${index + 1}`}\n              avatar={avatar_url}\n              href={html_url}\n              name={login}\n            >\n              <ul className=\"card-list\">\n                <li>\n                  <Tooltip text=\"Github username\">\n                    <FaUser color=\"rgb(255, 191, 116)\" size={22} />\n                    <a href={`https://github.com/${login}`}>{login}</a>\n                  </Tooltip>\n                </li>\n                <li>\n                  <FaStar color=\"rgb(255, 215, 0)\" size={22} />\n                  {stargazers_count.toLocaleString()} stars\n                </li>\n                <li>\n                  <FaCodeBranch color=\"rgb(129, 195, 245)\" size={22} />\n                  {forks.toLocaleString()} forks\n                </li>\n                <li>\n                  <FaExclamationTriangle color=\"rgb(241, 138, 147)\" size={22} />\n                  {open_issues.toLocaleString()} open\n                </li>\n              </ul>\n            </Card>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nReposGrid.propTypes = {\n  repos: PropTypes.array.isRequired,\n};\n\nexport default class Popular extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedLanguage: \"ALL\",\n      repos: {},\n      error: null,\n    };\n\n    this.updateLanguage = this.updateLanguage.bind(this);\n    this.isLoading = this.isLoading.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateLanguage(this.state.selectedLanguage);\n  }\n\n  updateLanguage(selectedLanguage) {\n    this.setState({\n      selectedLanguage,\n      error: null,\n    });\n\n    if (!this.state.repos[selectedLanguage]) {\n      fetchPopularRepos(selectedLanguage)\n        .then((data) => {\n          this.setState(({ repos }) => ({\n            repos: {\n              ...repos,\n              [selectedLanguage]: data,\n            },\n          }));\n        })\n        .catch((error) => {\n          console.warn(\"Error fetching repos: \", error);\n          this.setState({\n            error: \"There was an error fetching the repositories.\",\n          });\n        });\n    }\n  }\n\n  isLoading() {\n    const { selectedLanguage, repos, error } = this.state;\n\n    return !repos[selectedLanguage] && error == null;\n  }\n\n  render() {\n    const { selectedLanguage, repos, error } = this.state;\n    return (\n      <React.Fragment>\n        <LanguagesNav\n          selected={selectedLanguage}\n          onUpdateLanguage={this.updateLanguage}\n        />\n        {this.isLoading() && <Loading text=\"Fetching Repos\" />}\n\n        {error && <p className=\"center-text error\">{error}</p>}\n\n        {repos[selectedLanguage] && (\n          <ReposGrid repos={repos[selectedLanguage]} />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n","/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/utils/api.js",["64"],"import { func } from \"prop-types\";\n\nconst id = \"Iv1.f97937d2d7b85da9\";\nconst sec = \"a7e30318a90db97189276e573b2b64fe987f4ad9\";\n\nconst params = `?client_id=${id}&client_secret=${sec}`;\n\nfunction getErrorMsg(message, username) {\n  if (message === \"Not Found\") {\n    return `${username} doesn't exist`;\n  }\n\n  return message;\n}\n\nfunction getProfile(username) {\n  return fetch(`https://api.github.com/users/${username}${params}`)\n    .then((res) => res.json())\n    .then((profile) => {\n      if (profile.message) {\n        throw new Error(getErrorMsg(profile.message, username));\n      }\n\n      return profile;\n    });\n}\n\nfunction getRepos(username) {\n  return fetch(\n    `https://api.github.com/users/${username}/repos${params}&per_page=100`\n  )\n    .then((res) => res.json())\n    .then((repos) => {\n      if (repos.message) {\n        throw new Error(getErrorMsg(repos.message, username));\n      }\n\n      return repos;\n    });\n}\n\nfunction getStarCount(repos) {\n  return repos.reduce(\n    (count, { stargazers_count }) => count + stargazers_count,\n    0\n  );\n}\n\nfunction calculateScore(followers, repos) {\n  return followers * 3 + getStarCount(repos);\n}\n\nfunction getUserData(player) {\n  return Promise.all([getProfile(player), getRepos(player)]).then(\n    ([profile, repos]) => ({\n      profile,\n      score: calculateScore(profile.followers, repos),\n    })\n  );\n}\n\nfunction sortPlayers(players) {\n  return players.sort((a, b) => b.score - a.score);\n}\n\nexport function battle(players) {\n  return Promise.all([\n    getUserData(players[0]),\n    getUserData(players[1]),\n  ]).then((results) => sortPlayers(results));\n}\n\nexport function fetchPopularRepos(language) {\n  const endpoint = window.encodeURI(\n    `https://api.github.com/search/repositories?q=stars:>1+language:${language}&sort=stars&order=desc&type=Repositories`\n  );\n\n  return fetch(endpoint)\n    .then((res) => res.json())\n    .then((data) => {\n      if (!data.items) {\n        throw Error(data.message);\n      }\n\n      return data.items;\n    });\n}\n","/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/components/Battle.js",["65"],"/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/components/Card.js",[],"/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/components/Loading.js",[],"/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/components/Tooltip.js",[],"/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/components/Hover.js",[],"/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/contexts/theme.js",[],"/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/components/Nav.js",["66"],"import { func } from \"prop-types\";\nimport * as React from \"react\";\nimport { ThemeConsumer } from \"../contexts/theme\";\nimport { NavLink } from \"react-router-dom\";\n\nconst activeStyle = {\n  color: \"rgb(187, 46, 31)\",\n};\n\nexport default function Nav() {\n  return (\n    <ThemeConsumer>\n      {({ theme, toggleTheme }) => (\n        <nav className=\"row space-between\">\n          <ul className=\"row nav\">\n            <li>\n              <NavLink\n                to=\"/\"\n                exact\n                activeStyle={activeStyle}\n                className=\"nav-link\"\n              >\n                Popular\n              </NavLink>\n            </li>\n            <li>\n              <NavLink\n                to=\"/battle\"\n                exact\n                activeStyle={activeStyle}\n                className=\"nav-link\"\n              >\n                Battle\n              </NavLink>\n            </li>\n          </ul>\n          <button\n            style={{ fontSize: 30 }}\n            className=\"btn-clear\"\n            onClick={toggleTheme}\n          >\n            {theme === \"light\" ? \"🔦\" : \"💡\"}\n          </button>\n        </nav>\n      )}\n    </ThemeConsumer>\n  );\n}\n","/Users/maitaoguo/Desktop/Code_Learning/React_Learning/github-battle/src/components/Results.js",["67","68"],"import React from \"react\";\nimport { battle } from \"../utils/api\";\nimport {\n  FaCompass,\n  FaBriefcase,\n  FaUsers,\n  FaUserFriends,\n  FaCode,\n  FaUser,\n} from \"react-icons/fa\";\nimport Card from \"./Card\";\nimport PropTypes from \"prop-types\";\nimport Loading from \"./Loading\";\nimport Tooltip from \"./Tooltip\";\nimport queryString from \"query-string\";\nimport { Link } from \"react-router-dom\";\n\nfunction ProfileList({ profile }) {\n  return (\n    <ul className=\"card-list\">\n      <li>\n        <FaUser color=\"rgb(239, 115, 115)\" size={22} />\n        {profile.name}\n      </li>\n      {profile.location && (\n        <li>\n          <Tooltip text=\"User's location\">\n            <FaCompass color=\"rgb(144, 115, 255)\" size={22} />\n            {profile.location}\n          </Tooltip>\n        </li>\n      )}\n      {profile.company && (\n        <li>\n          <Tooltip text=\"User's company\">\n            <FaBriefcase color=\"#795548\" size={22} />\n            {profile.company}\n          </Tooltip>\n        </li>\n      )}\n      <li>\n        <FaUsers color=\"rgb(129, 195, 245)\" size={22} />\n        {profile.followers.toLocaleString()} followers\n      </li>\n      <li>\n        <FaUserFriends color=\"rgb(64, 183, 95)\" size={22} />\n        {profile.following.toLocaleString()} following\n      </li>\n    </ul>\n  );\n}\n\nProfileList.propTypes = {\n  profile: PropTypes.object.isRequired,\n};\n\nexport default class Results extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      winner: null,\n      loser: null,\n      error: null,\n      loading: true,\n    };\n  }\n  componentDidMount() {\n    const { playerOne, playerTwo } = queryString.parse(\n      this.props.location.search\n    );\n\n    battle([playerOne, playerTwo])\n      .then((players) => {\n        this.setState({\n          winner: players[0],\n          loser: players[1],\n          error: null,\n          loading: false,\n        });\n      })\n      .catch(({ message }) => {\n        this.setState({\n          error: message,\n          loading: false,\n        });\n      });\n  }\n\n  render() {\n    const { winner, loser, error, loading } = this.state;\n\n    if (loading === true) {\n      return <loading text=\"Battling\" />;\n    }\n\n    if (error) {\n      return <p className=\"center-text error\">{error}</p>;\n    }\n    return (\n      <React.Fragment>\n        <div className=\"grid space-around container-sm\">\n          <Card\n            header={winner.score === loser.score ? \"Tie\" : \"Winner\"}\n            subheader={`Score: ${winner.score.toLocaleString()}`}\n            avatar={winner.profile.avatar_url}\n            href={winner.profile.html_url}\n            name={winner.profile.login}\n          >\n            <ProfileList profile={winner.profile} />\n          </Card>\n\n          <Card\n            header={winner.score === loser.score ? \"Tie\" : \"Loser\"}\n            subheader={`Score: ${loser.score.toLocaleString()}`}\n            avatar={loser.profile.avatar_url}\n            name={loser.profile.login}\n            href={loser.profile.html_url}\n          >\n            <ProfileList profile={loser.profile} />\n          </Card>\n        </div>\n        <Link className=\"btn dark-btn btn-space\" to=\"/battle\">\n          Reset\n        </Link>\n      </React.Fragment>\n    );\n  }\n}\n\nResults.propTypes = {\n  playerOne: PropTypes.string.isRequired,\n  playerTwo: PropTypes.string.isRequired,\n  onReset: PropTypes.func.isRequired,\n};\n",{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":2,"column":8,"nodeType":"75","messageId":"76","endLine":2,"endColumn":16},{"ruleId":"73","severity":1,"message":"77","line":1,"column":17,"nodeType":"75","messageId":"76","endLine":1,"endColumn":25},{"ruleId":"73","severity":1,"message":"78","line":43,"column":11,"nodeType":"75","messageId":"76","endLine":43,"endColumn":15},{"ruleId":"73","severity":1,"message":"79","line":1,"column":10,"nodeType":"75","messageId":"76","endLine":1,"endColumn":14},{"ruleId":"73","severity":1,"message":"80","line":9,"column":8,"nodeType":"75","messageId":"76","endLine":9,"endColumn":15},{"ruleId":"73","severity":1,"message":"79","line":1,"column":10,"nodeType":"75","messageId":"76","endLine":1,"endColumn":14},{"ruleId":"73","severity":1,"message":"81","line":8,"column":3,"nodeType":"75","messageId":"76","endLine":8,"endColumn":9},{"ruleId":"73","severity":1,"message":"82","line":13,"column":8,"nodeType":"75","messageId":"76","endLine":13,"endColumn":15},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'Fragment' is defined but never used.","'name' is assigned a value but never used.","'func' is defined but never used.","'Results' is defined but never used.","'FaCode' is defined but never used.","'Loading' is defined but never used.","no-global-assign","no-unsafe-negation"]